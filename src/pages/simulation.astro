---
import Layout from '../layouts/Layout.astro';
import '../styles/simulation.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="MindMaster Club | Pi Simulation">
  <Header />
  <main class="simulation-container">
    <section class="simulation-hero">
      <h1>π <span class="simulation-title">Simulations</span></h1>
      <p class="subtitle">Visualize different methods for calculating π</p>
    </section>

    <div class="simulation-tabs">
      <button class="tab-btn active" data-tab="monte-carlo">Monte Carlo</button>
      <button class="tab-btn" data-tab="archimedes">Archimedes' Method</button>
      <button class="tab-btn" data-tab="leibniz">Leibniz Series</button>
    </div>

    <div class="simulation-content">
      <div id="monte-carlo" class="tab-pane active">
        <div class="simulation-description">
          <h2>Monte Carlo Method</h2>
          <p>This method approximates π by randomly placing points in a square and calculating the ratio of points that fall inside the inscribed circle.</p>
          <div class="pi-estimate">Current π estimate: <span id="mc-pi-estimate">0</span></div>
          <div class="simulation-controls">
            <button id="mc-start" class="btn btn-primary">Start</button>
            <button id="mc-stop" class="btn btn-outline">Stop</button>
            <button id="mc-reset" class="btn btn-outline">Reset</button>
            <div class="speed-control">
              <label for="mc-speed">Speed:</label>
              <input type="range" id="mc-speed" min="1" max="10" value="5">
            </div>
          </div>
        </div>
        <div class="simulation-visual">
          <canvas id="mc-canvas" width="400" height="400"></canvas>
          <div class="simulation-stats">
            <div>Points: <span id="mc-points">0</span></div>
            <div>Inside: <span id="mc-inside">0</span></div>
            <div>Ratio: <span id="mc-ratio">0</span></div>
          </div>
        </div>
      </div>

      <div id="archimedes" class="tab-pane">
        <div class="simulation-description">
          <h2>Archimedes' Method</h2>
          <p>Archimedes approximated π by calculating the perimeters of inscribed and circumscribed polygons around a circle.</p>
          <div class="pi-estimate">Current π estimate: <span id="archimedes-pi-estimate">0</span></div>
          <div class="simulation-controls">
            <button id="archimedes-start" class="btn btn-primary">Start</button>
            <button id="archimedes-stop" class="btn btn-outline">Stop</button>
            <div class="sides-control">
              <label for="archimedes-sides">Sides: <span id="current-sides">6</span></label>
              <input type="range" id="archimedes-sides" min="6" max="96" step="6" value="6">
            </div>
          </div>
        </div>
        <div class="simulation-visual">
          <canvas id="archimedes-canvas" width="400" height="400"></canvas>
          <div class="simulation-stats">
            <div>Lower bound: <span id="archimedes-lower">3.0000</span></div>
            <div>Upper bound: <span id="archimedes-upper">3.4641</span></div>
          </div>
        </div>
      </div>

      <div id="leibniz" class="tab-pane">
        <div class="simulation-description">
          <h2>Leibniz Series</h2>
          <p>This infinite series converges to π/4: 1 - 1/3 + 1/5 - 1/7 + 1/9 - ... = π/4</p>
          <div class="pi-estimate">Current π estimate: <span id="leibniz-pi-estimate">0</span></div>
          <div class="simulation-controls">
            <button id="leibniz-start" class="btn btn-primary">Start</button>
            <button id="leibniz-stop" class="btn btn-outline">Stop</button>
            <button id="leibniz-reset" class="btn btn-outline">Reset</button>
            <div class="terms-control">
              <label for="leibniz-terms">Terms: <span id="current-terms">0</span></label>
              <input type="range" id="leibniz-terms" min="1" max="1000" value="100">
            </div>
          </div>
        </div>
        <div class="simulation-visual">
          <div id="leibniz-series" class="series-display">1 - 1/3 + 1/5 - ...</div>
          <div class="convergence-chart">
            <canvas id="leibniz-chart" width="400" height="300"></canvas>
          </div>
        </div>
      </div>
    </div>
  </main>
  <Footer />

  <script is:inline>
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.tab-pane').forEach(p => p.classList.remove('active'));
        
        btn.classList.add('active');
        document.getElementById(btn.dataset.tab).classList.add('active');
      });
    });

    const mcCanvas = document.getElementById('mc-canvas');
    const mcCtx = mcCanvas.getContext('2d');
    let mcAnimationId = null;
    let totalPoints = 0;
    let pointsInside = 0;
    let mcSpeed = 5;

    function initMonteCarlo() {
      mcCtx.clearRect(0, 0, mcCanvas.width, mcCanvas.height);
      mcCtx.fillStyle = '#0a0a15';
      mcCtx.fillRect(0, 0, mcCanvas.width, mcCanvas.height);
      
      mcCtx.strokeStyle = 'rgba(100, 255, 218, 0.8)';
      mcCtx.lineWidth = 2;
      mcCtx.beginPath();
      mcCtx.rect(0, 0, mcCanvas.width, mcCanvas.height);
      mcCtx.stroke();
      
      mcCtx.beginPath();
      mcCtx.arc(mcCanvas.width/2, mcCanvas.height/2, mcCanvas.width/2, 0, Math.PI*2);
      mcCtx.stroke();
    }

    function runMonteCarlo() {
      for (let i = 0; i < mcSpeed * 10; i++) {
        addRandomPoint();
      }
      mcAnimationId = requestAnimationFrame(runMonteCarlo);
    }

    function addRandomPoint() {
      const x = Math.random() * mcCanvas.width;
      const y = Math.random() * mcCanvas.height;
      const distance = Math.sqrt(Math.pow(x - mcCanvas.width/2, 2) + Math.pow(y - mcCanvas.height/2, 2));
      const isInside = distance <= mcCanvas.width/2;
      
      mcCtx.fillStyle = isInside ? 'rgba(100, 255, 218, 0.7)' : 'rgba(255, 100, 218, 0.7)';
      mcCtx.beginPath();
      mcCtx.arc(x, y, 2, 0, Math.PI*2);
      mcCtx.fill();
      
      totalPoints++;
      if (isInside) pointsInside++;
      
      const ratio = pointsInside / totalPoints;
      const piEstimate = ratio * 4;
      
      updateMonteCarloStats(totalPoints, pointsInside, ratio, piEstimate);
    }

    function updateMonteCarloStats(points, inside, ratio, piEstimate) {
      document.getElementById('mc-points').textContent = points;
      document.getElementById('mc-inside').textContent = inside;
      document.getElementById('mc-ratio').textContent = ratio.toFixed(6);
      document.getElementById('mc-pi-estimate').textContent = piEstimate.toFixed(6);
    }

    document.getElementById('mc-start').addEventListener('click', () => {
      if (!mcAnimationId) {
        runMonteCarlo();
      }
    });
    
    document.getElementById('mc-stop').addEventListener('click', () => {
      if (mcAnimationId) {
        cancelAnimationFrame(mcAnimationId);
        mcAnimationId = null;
      }
    });
    
    document.getElementById('mc-reset').addEventListener('click', () => {
      if (mcAnimationId) {
        cancelAnimationFrame(mcAnimationId);
        mcAnimationId = null;
      }
      totalPoints = 0;
      pointsInside = 0;
      initMonteCarlo();
      updateMonteCarloStats(0, 0, 0, 0);
    });
    
    document.getElementById('mc-speed').addEventListener('input', (e) => {
      mcSpeed = parseInt(e.target.value);
    });

    initMonteCarlo();
  </script>
</Layout>
